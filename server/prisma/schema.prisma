generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  TICKETED
  FREE
}

model User {
  id              Int            @id @default(autoincrement())
  fullName        String
  email           String         @unique
  password        String
  referralCode    String         @unique
  emailConfirmed  Boolean        @default(false)
  points          Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  referrerId      Int? // Referral code from another user
  Referrer        User?          @relation("UserReferrer", fields: [referrerId], references: [id])
  ReferreredUsers User[]         @relation("UserReferrer")
  Point           Point[]
  ConfirmToken    ConfirmToken[]
  Transaction     Transaction[]
  Wallet          Wallet?
  Review          Review[]
  Coupon          Coupon[]
  Registration    Registration[]
}

model Promotor {
  id             Int      @id @default(autoincrement())
  fullName       String
  email          String   @unique
  password       String
  emailConfirmed Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Event        Event[]
  ConfirmToken ConfirmToken[]
}

model ConfirmToken {
  id          Int      @id @default(autoincrement())
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      Int
  promotorId  Int

  User     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Promotor Promotor @relation(fields: [promotorId], references: [id])
}

model Event {
  id                 Int       @id @default(autoincrement())
  title              String
  image              String
  description        String
  location           String
  eventSchedule      DateTime
  ticketPrice        Decimal
  ticketAvailability Int
  categoryId         Int
  promotorId         Int
  host               String
  eventType          EventType
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  Category      Category        @relation(fields: [categoryId], references: [id])
  Promotor      Promotor        @relation(fields: [promotorId], references: [id])
  Ticket        Ticket[]
  Attendee      Attendee[]
  PromotorTrans PromotorTrans[]
  registrations Registration[]
  Promotion     Promotion[]
  Transaction   Transaction[]
  Review        Review[]
}

model Attendee {
  id      String @id @default(uuid())
  name    String
  email   String
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id])
}

model PromotorTrans {
  id             String        @id @default(uuid())
  amount         Float
  eventId        Int
  registrationId Int
  event          Event         @relation(fields: [eventId], references: [id])
  createdAt      DateTime      @default(now())
  registration   Registration? @relation(fields: [registrationId], references: [id])
}

model Registration {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  PromotorTrans PromotorTrans[]
}

model Ticket {
  id            Int         @id @default(autoincrement())
  ticketCode    String      @unique
  totalPrice    Decimal
  transactionId Int
  createdAt     DateTime    @default(now())
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
  Event         Event?      @relation(fields: [eventId], references: [id])
  eventId       Int?
}

model Promotion {
  id            Int      @id @default(autoincrement())
  promotionCode String   @unique
  title         String
  description   String
  discountRate  Float
  stock         Int      @default(10)
  eventId       Int
  expiredDate   DateTime
  createdAt     DateTime @default(now())
  Event         Event    @relation(fields: [eventId], references: [id])
}

model Coupon {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  discountRate Int      @default(10)
  used         Boolean  @default(false)
  userId       Int
  expiredDate  DateTime
  User         User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  amount    Decimal
  Event     Event    @relation(fields: [eventId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  Ticket    Ticket[]
}

model Point {
  id        Int      @id @default(autoincrement())
  balance   Int      @default(0)
  userId    Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime // Expiration date for points
  User      User     @relation(fields: [userId], references: [id])
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  image String
  Event Event[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  eventId   Int
  Event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  feedback  String
  createdAt DateTime @default(now())
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // Ensure userId is unique to prevent multiple wallets for one user
  balance   Decimal  @default(0) // Default balance
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}
