generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  TICKETED
  FREE
}

model User {
  id              Int             @id @default(autoincrement())
  fullName        String
  email           String          @unique
  password        String
  referralCode    String          @unique
  emailConfirmed  Boolean         @default(false)
  points          Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  referrerId      Int? // Referral code dari user lain

  Referrer        User?           @relation("UserReferrer", fields: [referrerId], references: [id])
 
  ReferreredUsers User[]          @relation("UserReferrer")
  tickets         Ticket[] // Untuk customer
  redeemedPoints  RedeemedPoint[]
  ConfirmToken    ConfirmToken[]
  Registration    Registration[]
  Coupon          Coupon[]
}

model Promotor {
  id             Int      @id @default(autoincrement())
  fullName       String
  email          String   @unique
  password       String
  emailConfirmed Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Event        Event[]
  ConfirmToken ConfirmToken[]
}

model ConfirmToken {
  id          Int      @id @default(autoincrement())
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      Int
  promotorId  Int

  User     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  promotor Promotor @relation(fields: [promotorId], references: [id])
}

model Event {
  id                 Int       @id @default(autoincrement())
  title              String
  image              String
  description        String
  location           String
  eventSchedule      DateTime
  ticketPrice        Float
  ticketAvailability Int
  categoryId         Int
  promotorId         Int
  host               String
  eventType          EventType
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  Category           Category  @relation(fields: [categoryId], references: [id])
  Promotor           Promotor  @relation(fields: [promotorId], references: [id])
  Ticket             Ticket[]
  Attendee            Attendee[]
  PromotorTrans      PromotorTrans[]
  registrations      Registration[]
}

model Attendee {
  id      String @id @default(uuid())
  name    String
  email   String
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id])
}

model PromotorTrans {
  id        String   @id @default(uuid())
  amount    Float
  eventId   Int
  registrationId Int
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
   registration Registration? @relation(fields: [registrationId], references: [id])
}

model Registration {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  PromotorTrans PromotorTrans[]
}


model Ticket {
  id           Int      @id @default(autoincrement())
  eventId      Int
  event        Event    @relation(fields: [eventId], references: [id])
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  pricePaid    Float
  discountUsed Float    @default(0)
  createdAt    DateTime @default(now())
}

model RedeemedPoint {
  id         Int      @id @default(autoincrement())
  userId     Int
  balance    Int
  used       Boolean
  createdAt  DateTime @default(now())
  expiresAt  DateTime // Tanggal kedaluwarsa poin

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String   @unique
  discount  Int      
  used      Boolean
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  image String
  Event Event[]
}